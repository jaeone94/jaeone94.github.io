<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-08-26T00:46:13+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">머릿속에 다 있어요</title><subtitle>개발 중에 습득한 기술을 정리하는 기술 블로그 입니다.</subtitle><author><name>Lee Jaeone</name></author><entry><title type="html">[postgresql] 트리거를 배워보자</title><link href="http://localhost:4000/db/Postgresql-%ED%8A%B8%EB%A6%AC%EA%B1%B0%EB%A5%BC-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EC%9E%90/" rel="alternate" type="text/html" title="[postgresql] 트리거를 배워보자" /><published>2021-08-26T00:00:00+09:00</published><updated>2021-08-26T00:00:00+09:00</updated><id>http://localhost:4000/db/%5BPostgresql%5D%20%ED%8A%B8%EB%A6%AC%EA%B1%B0%EB%A5%BC%20%EB%B0%B0%EC%9B%8C%EB%B3%B4%EC%9E%90</id><content type="html" xml:base="http://localhost:4000/db/Postgresql-%ED%8A%B8%EB%A6%AC%EA%B1%B0%EB%A5%BC-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EC%9E%90/">&lt;p&gt;오늘은 업무를 진행하면서 배웠던 Trigger에 대해 정리해보고자 합니다. 
DB 는 Postgresql 13 버젼을 기준으로 기술하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;trigger-트리거-란-&quot;&gt;Trigger (트리거) 란 ?&lt;/h2&gt;

&lt;p&gt;트리거는 대부분의 데이터베이스에서 이벤트에 의해 자동으로 응답하는 방법입니다.
데이터베이스 또는 특정 테이블에 연결되어 이벤트를 수신하면 특정 코드세트를 실행시킬 수 있습니다.&lt;/p&gt;

&lt;p&gt;쉽게말해서 테이블에 어떤 행이 INSERT , UPDATE , DELETE 되는 순간 등을 읽어서 
내가 원하는 동작을 수행하는 방법입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일반적으로 트리거는 DML 트리거를 의미하는데 (가장 많이 쓰입니다)
DML은 Data Definition Language의 약자로 데이터베이스에 입력된 데이터를 조작(등록, 수정, 삭제)하는 언어를 말합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;트리거는-언제-쓰이나요-&quot;&gt;트리거는 언제 쓰이나요 ?&lt;/h2&gt;

&lt;p&gt;트리거를 사용하는 이유는 대체로 이렇다고 많이들 얘기하시는 것 같아요&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;민감한 테이블에 대한 변경 감사 및 로깅&lt;/strong&gt;
사용자가 내용을 변경하는 그 순간에,
누가, 언제, 어떤값을 변경 했는지에 대한 기록을 history 테이블에 저장하고 싶다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;보안적인 이유&lt;/strong&gt;
 보안상 사용자가 접근할 수 없는 테이블에 값을 추가해야 할 때 (접속한 사용자의 ip address를 수집하고 싶다.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;간단한 검증 &amp;amp; 수정&lt;/strong&gt; 
 ex) 센서로부터 들어오는 데이터의 입력 시각을 초 단위까지 저장할 것이지만 초의 1의 자릿수 하위는 절삭하고 싶다. 
 (12:01:32.123123 -&amp;gt; 12:01:30.000000)&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런데 위의 예시 말고도 필요로 하는 경우가 종종 있습니다.
트리거를 반드시 사용해야하는 것은 아니지만 
개발하다보니 필요로 하는 순간이 종종 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;사용-시-주의점&quot;&gt;사용 시 주의점&lt;/h2&gt;
&lt;p&gt;개발 초기 단계에서부터 잘 설계한 트리거 함수와 테이블은 api 서버를 개발하는 입장에선 만능처럼 느껴집니다.&lt;/p&gt;

&lt;p&gt;극단적으로는 어플리케이션 서버가 클라이언트로부터 받은 핵심 데이터만 데이터베이스에 전달하도록 하고 입력으로부터 파생된 연산은 db server에 맡겨버릴 수도 있습니다.&lt;/p&gt;

&lt;p&gt;처음엔 어플리케이션 서버에 코드를 작성하는 것보다 트리거 함수를 작성하는 것이 더 빠르고 쉽게 느껴지겠지만 
잘못하면 심각한 성능위험을 야기할 수 있습니다. 게다가 트리거의 양이 많아질 수록 디버깅도 어렵고 유지보수 비용도 증가하죠.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;가능하면-피해야-하는-경우&quot;&gt;가능하면 피해야 하는 경우&lt;/h3&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;트리거가 너무 많이 있다.&lt;/strong&gt; (&lt;em&gt;유지보수가 어렵다.&lt;/em&gt;)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;트리거 함수의 코드가 너무 복잡하다.&lt;/strong&gt; (&lt;em&gt;이해하기가 어렵다.&lt;/em&gt;)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;트리거 함수의 코드 내부에 또 다른 저장 프로시저가 존재함.&lt;/strong&gt; (&lt;em&gt;실제론 복잡한데 단순해보이게 함.&lt;/em&gt;)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;트리거 함수가 재귀 순환한다.&lt;/strong&gt; (&lt;em&gt;성능을 크게 저하시킵니다 !&lt;/em&gt; )&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;트리거 함수 코드에 의해 또 다른 트리거가 호출된다.&lt;/strong&gt; ( &lt;em&gt;문제발생 시 찾는게 어렵다.&lt;/em&gt; )&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;트리거에서 반복문이 돈다.&lt;/strong&gt;  (&lt;em&gt;단일행 트리거인 경우 복수행 입력 시 성능 저하&lt;/em&gt; )&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;상황에 따라 위의 경우를 중 몇개가 해당되어야 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그러나 트리거는 반드시 성능을 고려하고 도입해야합니다.&lt;/p&gt;

&lt;p&gt;이벤트를 받아 트리거 함수가 동작할 때, &lt;strong&gt;트리거의 영향을 받는 모든 개체들은 트랜잭션이 열린 상태로 유지됩니다.&lt;/strong&gt;
즉, 트리거 연산 시간만큼 트랜잭션 lock 타임도 길어진다는 것이죠.
잘못짠 트리거는 성능을 크게 저하시킬 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;가능하면-이렇게&quot;&gt;가능하면 이렇게&lt;/h3&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;문서화&lt;/strong&gt;
트리거가 아니더라도 특정 함수를 작성할 때는 
누가 와서 읽더라도 이 것이 왜 있는지, 뭘 하는지, 어떻게 동작 하는지 알 수 있도록&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;하나의 작업당 하나의 트리거만 사용&lt;/strong&gt;
트리거는 필요에 의해서만 사용하고, 무분별한 사용은 지양&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;가능하면 간단히 작성&lt;/strong&gt;
너무 복잡한 비즈니스 로직은 트리거에서 처리 X&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;트리거-작성-문법&quot;&gt;트리거 작성 문법&lt;/h2&gt;

&lt;p&gt;postgresql 에서 트리거 작성 문법은 다음과 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{ }  : 필수선택
[ ] : 생략가능&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRIGGER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;트리거&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;  
&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AFTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSTEAD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OF&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;-- 트리거 실행 시점&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DML&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이벤트&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DML&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이벤트&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;-- 트리거 이벤트 (INSERT or UPDATE or DELETE ..)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;트리거를&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;적용시킬&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;테이블&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;또는&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;뷰&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EACH&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;STATEMENT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; 		&lt;span class=&quot;c1&quot;&gt;-- 트리거 실행범위 ( 각행 또는 한번만 )&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조건&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; 						&lt;span class=&quot;c1&quot;&gt;-- 트리거 실행 조건( EACH ROW 일 때 조건에 만족하는 행만 수행가능 )&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXCUTE&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;함수명&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;문자열_상수_파라미터&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;트리거-실행시점&quot;&gt;트리거 실행시점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;BEFORE&lt;/strong&gt; : 트리거 이벤트(INSERT or UPDATE ..)가 &lt;strong&gt;실행되기 전&lt;/strong&gt;에 트리거로 야기되는 동작이 수행됩니다. 
그렇기 때문에 각 행에 대해서 모든 조치가 수행되고 나서 트리거를 적용시킬 테이블 이벤트가 수행됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AFTER&lt;/strong&gt; : 트리거 이벤트가 &lt;strong&gt;실행된 후&lt;/strong&gt;에 트리거로 야기되는 동작이 수행됩니다.
때문에 각 행 또는 모든 명령 세트가 수행된 후에 트리거를 적용시킬 테이블 이벤트가 수행됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;INSTEAD OF&lt;/strong&gt; : &lt;strong&gt;이벤트를 실행하는 대신&lt;/strong&gt; 영향을 받을 각 행에 대해 트리거 조치가 활성화 됩니다.
    &lt;blockquote&gt;
      &lt;p&gt;BEFORE , AFTER 트리거와는 달리 &lt;strong&gt;INSTEAD OF 트리거는 테이블이 아니라 뷰(View)에 대해서만 정의할 수 있습니다.&lt;/strong&gt;
게다가 실행 범위가 각 행인 경우에만 정의할 수 있습니다.
INSTEAD OF 트리거는 원래 삽입, 갱신, 삭제가 불가능한 뷰의 데이터를 조작할 수 있습니다.
**반대로 BEFORE, AFTER 트리거는 실행범위가 각 행인 경우 테이블(Table)에 대해서만 정의할 수 있습니다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;실행시점에-따른-사용-용도&quot;&gt;실행시점에 따른 사용 용도&lt;/h4&gt;
&lt;p&gt;트리거 실행 시점이 다른 것은 트리거의 용도가 다른 것을 의미합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;INSTEAD OF 트리거의 경우 뷰의 조작이 가능하다는 점이 있지만 두 BEFORE, AFTER와 성격이 다름으로 이
토픽에선 소개하지 않고 , BEFORE 와 AFTER 트리거의 차이에 대해서만 기술하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일반적으로,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BEFORE 트리거는 입력될 데이터에 유효성을 확인하거나 
다른 테이블에서 값을 읽어서 새로 삽입될 행에 추가 데이터를 넣어주는 방식으로 사용됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AFTER 트리거는 데이터 입력 이후,  후속 수정 조작을 수행하거나 (히스토리 테이블을 찍는 등)
입력된 값에 의해 데이터베이스 외부에서 경보를 울리는 등의 후속 조치를 수행할 때 사용합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;양 트리거의 결정적 차이는 트리거 이벤트가 트리거 조치 이후에 수행 되는지 조치 이전에 수행 되는지 입니다.
그 차이에 따라 사용법도 서로 다르기 때문에 적절한 트리거를 선택 해야겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;트리거 이벤트가 수행된다는 것은 ( 그리고 그것이 성공했다는 것은 ) 변경된 데이터가 무결성 제약조건에 위배되지 않았다는 것 입니다.
즉, BEFORE 의 경우 이벤트가 수행되기 전에 조치가 먼저 수행되기 때문에 무결성 제약조건을 검사하지 않죠.
따라서 &lt;strong&gt;&lt;em&gt;BEFORE 트리거의 경우는 INSERT, UPDATE, DELETE, MERGE 등의 SQL 문을 함수에 포함할 수 없습니다!&lt;/em&gt;&lt;/strong&gt;
왜냐하면 이벤트에 의해 수행될 조치를 정의하는 것인데. 무결성 제약조건 검사를 수행하기 이전이라 이벤트가 정상적으로 수행될 지 모르기 때문입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;트리거-이벤트&quot;&gt;트리거 이벤트&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;INSERT&lt;/strong&gt; : 삽입 이벤트에 대해 조치합니다. (트리거 실행범위가 행 수준일 때, &lt;strong&gt;NEW&lt;/strong&gt; 변수로 새롭게 등록되는 행에 접근가능)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; : 갱신 이벤트에 대해 조치합니다. (트리거 실행범위가 행 수준일 때, &lt;strong&gt;OLD, NEW&lt;/strong&gt; 변수로 변경 전과 변경 후의 행에 접근가능)
    &lt;blockquote&gt;
      &lt;p&gt;UPDATE [ OF 컬럼명1, 컬럼명2, …]  이렇게 특정 컬럼의 변경만 조치할 수도 있습니다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt; : 삭제 이벤트에 대해 조치합니다. (트리거 실행범위가 행 수준일 때, &lt;strong&gt;OLD&lt;/strong&gt; 변수로 삭제 전의 행에 접근가능)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TRUNCATE&lt;/strong&gt; : truncate 대해 조치합니다. ( Postgresql )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;트리거 이벤트는 INSERT OR UPDATE .. 와 같이 여러 이벤트 세트를 동시에 검사할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;TRUNCATE 이벤트는 모든 데이터를 지우고 공간을 반납하는 명령입니다.&lt;br /&gt;
당연하게도 실행범위가 각 행인 경우는 있을 수 없기 때문에 범위가 STATEMENT(한번만)에서만 사용할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;트리거-실행범위&quot;&gt;트리거 실행범위&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ROW&lt;/strong&gt; : 전체 명령의 각 행당 한번씩 수행됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;STATEMENT&lt;/strong&gt; : 한번만 수행됩니다. (&lt;strong&gt;기본값&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;트리거-실행조건&quot;&gt;트리거 실행조건&lt;/h3&gt;
&lt;p&gt;트리거 함수가 실제로 실행되는지 여부를 결정하는 조건식입니다. 
IF WHEN 표현식으로 작성해야하며 조건의 결과가 true일 경우 함수가 실행됩니다.
실행범위가 ROW 일 경우 트리거 이벤트에 따라 new 또는 old 변수에 접근할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;그-외에-알아야-할-점&quot;&gt;그 외에 알아야 할 점&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;동일한 이벤트에 여러 트리거가 정의되었을 경우&lt;/strong&gt; : 
 동일한 이벤트에 대해 동일한 종류의 여러 트리거가 정의된 경우 &lt;strong&gt;이름의 알파벳 순서&lt;/strong&gt;로 트리거됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;트리거 함수에 PROCEDURE 와 FUNCTION의 차이&lt;/strong&gt; :
 동작상 차이는 없습니다. 그러나 반드시 프로시저가 아니라 함수가 참조되어야 합니다. 프로시저는 더이상 사용되지 않습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;트리거-함수&quot;&gt;트리거 함수&lt;/h2&gt;
&lt;p&gt;Postgresql 은 트리거를 작성하면서 동시에 동작 명령을 정의할 수 없습니다. 
반드시 동작시킬 트리거 함수를 먼저 정의하여 트리거 생성문에 삽입하여야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;트리거-함수의-형태&quot;&gt;트리거 함수의 형태&lt;/h3&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;함수명&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plpgsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;트리거 함수는 return type이 trigger 이고 파라미터가 없는 일반적인 function 으로 선언해야합니다.
트리거 선언부에서 파라미터를 실제로 함수로 전달한다 하더라도,  반드시 파라미터가 없는 형태로 작성해야 합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Q. 전달될 인수는 어디갔나요 ? 
A. 아래에서 설명할 TG_ARGV 라는 특수 변수 배열에서 조회할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;트리거-함수의-반환값&quot;&gt;트리거 함수의 반환값&lt;/h3&gt;
&lt;p&gt;트리거 함수의 반환 값(RETURN VALUE)은&lt;br /&gt;
NULL 또는 트리거 함수를 호출한 테이블의 레코드와 정확히 똑같은 구조의 레코드를 반환해야합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;규칙&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;BEFORE 트리거가 호출한 함수의 반환값이 NULL 인 경우&lt;/strong&gt; 
일련의 작업이 모두 취소되고 EVENT도 수행되지 않습니다. 트리거를 호출한 테이블의 행이 등록, 수정, 삭제되지 않습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;INSERT, UPDATE EVENT가 호출한 BEFORE 트리거일 경우&lt;/strong&gt; 
RETURN 하는 레코드 데이터가 트리거를 호출한 테이블에 반영됩니다. (해당 이벤트에 트리거 함수가 하나만 존재할 경우)
    &lt;blockquote&gt;
      &lt;p&gt;트리거 함수가 2개 이상 존재할 경우, 알파뱃 순서대로 트리거 함수가 호출되며 이전의 트리거 함수의 RETURN 레코드가 후속 트리거 함수의 NEW에 삽입됩니다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DELETE EVENT가 호출한 BEFORE 트리거의 경우&lt;/strong&gt; 
RETURN 값의 데이터가 특별히 어떠한 영향을 끼치지 않지만 
트리거 함수가 2개 이상 존재할 경우, 후속 작업을 수행하기 위해선 반드시 NULL이 아닌 값을 RETURN 해야합니다. 
**DELETE EVENT 의 트리거일 경우 NEW 값이 NULL 인 것을 잊지마세요 !&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;실행시점이 AFTER인 트리거나 실행범위가 STATEMENT(한번만)인 트리거는&lt;/strong&gt; 
RETURN 값이 무엇이든지 무시합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;트리거-함수의-특수-변수들&quot;&gt;트리거 함수의 특수 변수들&lt;/h3&gt;
&lt;p&gt;선언한 함수가 트리거에게 호출될 때 특수한 변수들이 자동으로 만들어집니다.
다음은 자주 사용하는 변수들 입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NEW&lt;/strong&gt; ( record ) 
EACH ROW(각 행) INSERT, UPDATE 상황에서 새롭게 입력되거나 변경되는 레코드 정보&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OLD&lt;/strong&gt; ( record ) 
EACH ROW(각 행) UPDATE, DELETE 상황에서 변경되거나, 삭제되는 레코드 정보&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;NEW&lt;/th&gt;
      &lt;th&gt;OLD&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;INSERT&lt;/td&gt;
      &lt;td&gt;신규 RECORD&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UPDATE&lt;/td&gt;
      &lt;td&gt;변경이후 RECORD&lt;/td&gt;
      &lt;td&gt;변경이전 RECORD&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
      &lt;td&gt;삭제되는 RECORD&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;TG_OP&lt;/strong&gt; ( text ) 
함수를 호출하게된 트리거 이벤트의 문자열 ( “INSERT”, “UPDATE” 등 )&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TG_TABLE_NAME&lt;/strong&gt; ( text ) 
함수의 호출을 야기한 테이블 이름의 문자열&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TG_NARGS&lt;/strong&gt; ( integer )
전달된 파라미터의 수&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TG_ARGV&lt;/strong&gt; ( text[] )
전달된 파라미터 문자열의 배열&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;트리거-함수의-작성-예제&quot;&gt;트리거 함수의 작성 예제&lt;/h3&gt;
&lt;p&gt;다음은 트리거 함수의 작성 예제입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;실행시점이 BEFORE인 경우&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 사원의 급여 테이블이 업데이트 될 때마다 현재 사용자의 이름과 시간이 행에 같이 업데이트 되도록 함&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 그리고 업데이트 된 급여가 양수인지 체크함&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;급여&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;수정시간&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;수정한사람&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;사원급여&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- 새로 입력받거나 수정된 행의 사원 이름과 급여가 NULL이 아닌지 확인&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RAISE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPTION&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'사원 이름은 null이 될 수 없습니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;급여&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RAISE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPTION&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'% 급여는 null이 될 수 없습니다.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;-- 세상에 돈을 지불하면서 일하는 사람이 누가있나요 ?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;급여&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RAISE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXCEPTION&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'% 급여가 0보다 적습니다..'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;-- 급여 정보를 누가, 언제 수정했는지 같이 업데이트 해주자&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;수정시간&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;current_timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;수정한사람&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- 돌려줌 (BEFORE 시점이기 때문에 새로운 정보가 포함된 상태로 event 가 동작할 것임)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plpgsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRIGGER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;사원급여&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EACH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;사원급여&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;실행시점이 AFTER인 경우&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 사원 테이블의 데이터 변경작업이 수행되면 수행된 작업 정보를 history 테이블에 저장합니다. &lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;급여&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;integer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변경기록&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;수행한작업&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;시각&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;변경한사람&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;사원이름&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;급여&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;integer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변경기록&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;입력&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRIGGER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- 사원테이블의 데이터를 변경하면 사원_변경기록 테이블에 새로운 행을 입력합니다,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- 특수변수인 TG_OP의 값에 따라 새로운 행의 데이터를 다르게 분기합니다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TG_OP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DELETE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변경기록&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ELSIF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TG_OP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UPDATE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변경기록&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'U'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ELSIF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TG_OP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'INSERT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변경기록&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'I'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- result is ignored since this is an AFTER trigger&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plpgsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRIGGER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변경기록&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AFTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EACH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ROW&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변경기록&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;입력&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;예제 코드를 보시면 아시겠지만 실행 시점에 따라 수행하는 작업이 다르단 것을 알 수 있습니다 !
두 함수의 차이를 잘 모르시겠다면 &lt;strong&gt;트리거 실행시점&lt;/strong&gt; 부분을 다시 확인해주세요 :)&lt;/p&gt;

&lt;h2 id=&quot;작성한-트리거-확인-쿼리&quot;&gt;작성한 트리거 확인 쿼리&lt;/h2&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;TGNAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'호출한 테이블'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;PRONAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'트리거 함수명'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;PG_GET_TRIGGERDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'트리거 선언부'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PG_TRIGGER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PG_PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TGFOID&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TGISINTERNAL&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TGRELID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'트리거를 호출하는 테이블 이름'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;트리거를-작성했는데-값이-안들어와요-&quot;&gt;트리거를 작성했는데 값이 안들어와요 !&lt;/h2&gt;
&lt;p&gt;저희는 사람이기 때문에 문법 실수를 할 수도 있고 여러가지 이유로 트리거 함수가 실행되지 않을 수 있습니다.
트리거 함수의 경우 일반 함수와 다르게 작성 후 바로 실행테스트를 하기가 번거롭고, 직접 실행하고 결과로그를 확인하기 어렵기 때문에 다른 함수들과 마찬가지로 error 로그를 저장할 테이블을 만들고 함수 실행 중 발생하는 에러를 핸들링 하세요.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;SERIAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;sql_state&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;hint&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;사원&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;변경기록&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;입력&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;TRIGGER&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_sql_state&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_detail&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_hint&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;EXCEPTION&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OTHERS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACKED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DIAGNOSTICS&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_sql_state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RETURNED_SQLSTATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MESSAGE_TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_detail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PG_EXCEPTION_DETAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_hint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PG_EXCEPTION_HINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PG_EXCEPTION_CONTEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_sql_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;트리거-삭제&quot;&gt;트리거 삭제&lt;/h2&gt;
&lt;p&gt;트리거 삭제하려면 트리거를 먼저 삭제하고 트리거 함수를 삭제하세요.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;트리거 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRIGGER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;트리거&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CASCADE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESTRICT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;트리거 함수 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;함수&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;이름&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CASCADE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESTRICT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;reference&quot;&gt;&lt;em&gt;reference&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.postgresql.org/docs/current/plpgsql-trigger.html&lt;/li&gt;
  &lt;li&gt;https://www.postgresql.org/docs/current/sql-createtrigger.html&lt;/li&gt;
  &lt;li&gt;https://www.postgresql.org/docs/13/plpgsql-trigger.html&lt;/li&gt;
  &lt;li&gt;https://www.techonthenet.com/oracle/triggers/before_insert.php&lt;/li&gt;
  &lt;li&gt;https://www.ibm.com/docs/ko/db2/11.1?topic=statements-create-trigger&lt;/li&gt;
  &lt;li&gt;https://www.ibm.com/docs/ko/i/7.3?topic=triggers-instead-sql&lt;/li&gt;
  &lt;li&gt;https://www.ibm.com/docs/ko/db2/11.1?topic=dt-specifying-when-trigger-fires-before-after-instead-clauses&lt;/li&gt;
  &lt;li&gt;https://www.red-gate.com/simple-talk/homepage/sql-server-triggers-good-scary/&lt;/li&gt;
  &lt;li&gt;https://stackoverflow.com/questions/53504234/pgsql-trigger-function-write-exception-to-log-table&lt;/li&gt;
  &lt;li&gt;https://www.cybertec-postgresql.com/en/postgresql-how-to-write-a-trigger/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Lee Jaeone</name></author><category term="DB" /><category term="db" /><category term="trigger" /><category term="postgresql" /><summary type="html">오늘은 업무를 진행하면서 배웠던 Trigger에 대해 정리해보고자 합니다. DB 는 Postgresql 13 버젼을 기준으로 기술하였습니다.</summary></entry><entry><title type="html">위대한 여정의 시작</title><link href="http://localhost:4000/%EC%9E%A1%EC%83%9D%EA%B0%81/%EC%9C%84%EB%8C%80%ED%95%9C-%EC%97%AC%EC%A0%95%EC%9D%98-%EC%8B%9C%EC%9E%91/" rel="alternate" type="text/html" title="위대한 여정의 시작" /><published>2021-08-25T00:00:00+09:00</published><updated>2021-08-25T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%A1%EC%83%9D%EA%B0%81/%EC%9C%84%EB%8C%80%ED%95%9C%20%EC%97%AC%EC%A0%95%EC%9D%98%20%EC%8B%9C%EC%9E%91</id><content type="html" xml:base="http://localhost:4000/%EC%9E%A1%EC%83%9D%EA%B0%81/%EC%9C%84%EB%8C%80%ED%95%9C-%EC%97%AC%EC%A0%95%EC%9D%98-%EC%8B%9C%EC%9E%91/">&lt;!-- # *위대한 여정의 시작* --&gt;
&lt;h2 id=&quot;버튼을-누르다&quot;&gt;버튼을 누르다&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;“준비하시고… 쏘세요 !”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어디서 많이 들어본 말이죠 ?&lt;/p&gt;

&lt;p&gt;이 멘트를 기억하고 계신분들이 있을 것 같은데요.
바로 제가 어릴적까지 발행하던 주택복권의 사회자 멘트입니다. 
이 구령이 떨어지면, 사람들이 버튼을 눌러서 화살을 번호가 적힌 룰렛을 향해 발사합니다.&lt;/p&gt;

&lt;p&gt;부푼 기대와 함께 복권을 손에 쥔 사람은
다트가 날아가는 찰나의 순간에 ‘혹시 내가 산 복권이 당첨된 것은 아닐까’ 하는 설렘과 기대를 느낄 겁니다.&lt;/p&gt;

&lt;p&gt;저 또한 숙원사업이었던 블로그를 개설하고, 
첫 글을 작성하면서 로또 한 장을 산 것처럼 설렘을 느끼고 있습니다.&lt;/p&gt;

&lt;p&gt;저는 드디어 버튼을 눌렀기 때문입니다.&lt;/p&gt;

&lt;h2 id=&quot;기록을-시작하며&quot;&gt;기록을 시작하며&lt;/h2&gt;
&lt;p&gt;사실 저는 지금까지 기록과 사이가 먼 사람이었습니다.&lt;/p&gt;

&lt;p&gt;초등학교를 다닐 때에는
방학숙제로 준 일기를 매일 쓰지않아 방학이 끝나기 하루 전에 한달치의 일기(소설)를 쓰기도 했고
학창시절 내내 저의 교과서는 필기를 전혀 하지않아 당근마켓에 A급으로 판매가능할 정도로 깨끗했습니다.&lt;/p&gt;

&lt;p&gt;실무를 시작하고 나서도 옛날처럼 거의 기록을 하지 않았습니다.
어차피 머릿속에 다 있고, 기록할 시간에 고민해서 기능을 하나라도 더 구현해야 한다고 생각했기 때문입니다.&lt;/p&gt;

&lt;p&gt;지금 저는 안드로이드는 지금 다시 하라고 하면 Activity 만드는 것부터 배워야 할 것 같습니다(하하).
문서화를 하는 것과 하지 않는 것의 차이가 매우 크다는 사실을 알았습니다.
매번 새로운 시스템 환경에서 새로운 프레임워크나 언어를 배울 때 마다 
기존에 습득 했던 지식들이 너무도 쉽게 잊혀집니다. 저는 이제 저를 믿을 수 없습니다.&lt;/p&gt;

&lt;p&gt;결국, 제가 비로소 기록을 시작하는 이유는 간단합니다.
이제라도 일기를 쓰지 않으면, 제가 지금 초등학생때의 기억 대부분을 잊어버린 것처럼 &lt;del&gt;삽질하면서&lt;/del&gt; 배운 것도 잊어버릴 것을 이제는 깨달았기 때문입니다.&lt;/p&gt;

&lt;p&gt;또 구태여 블로그로 시작한 이유는
저의 짧은 지식의 공유가 (대부분은 삽질한 기록이겠지만) 이 커뮤니티의 누군가에게 도움이 되었으면 하고
공개된 블로그에 글을 작성하면서 저 스스로도 정확한 정보를 위해 한번 찾을 것을 두번 세번 검증하게 될 것이고, 그에 따라 저도 더 공부하게 될 것이라는 기대 때문입니다.&lt;/p&gt;

&lt;h2 id=&quot;끝으로&quot;&gt;끝으로&lt;/h2&gt;

&lt;p&gt;개발을 업으로 한지 벌써 2년이 되었습니다.
저는 여전히 컴퓨터와 대화하고 무언가를 만들어내는 것이 좋습니다.
그래서 더 좋은 개발자가 되고싶다는 생각을 합니다.&lt;/p&gt;

&lt;p&gt;그런데 좋은 개발자란 무엇일까요? 
소프트웨어 공학의 가치로는 좋은 프로그램을 빠른 시간에 적은 비용으로 구현할 수 있어야겠지요.&lt;/p&gt;

&lt;p&gt;저는 거기에 더해서, 
“끊임없이 발전하고 새로워지는 이 시장에서 도태되지 않으며
언젠가 선배가 되면 후배에게 자신이 겪은 경험과 시행착오를 공유할 수 있는 노련함도 갖춘 개발자” 라고 생각합니다.&lt;/p&gt;

&lt;p&gt;그러기 위해서 이제라도 작은 것도 기록하는 습관을 들이려고 합니다.&lt;/p&gt;

&lt;p&gt;요즘 구직자 입장에서 개발자 시장이 어느때보다 호황이라고 합니다. 
저는 이 글을 쓰면서,   “원하는 삶을 살기 위해 어떤 개발자가 되어야하는가?” 보다
“개발자로 살기위해 어떤 삶을 살아야할까?” 를 다시 고민하는 시간이었습니다.&lt;/p&gt;

&lt;p&gt;마치, 체크무늬 셔츠를 입기위해 공대에 진학하는 것처럼.&lt;/p&gt;

&lt;p&gt;끝으로 한 인용문과 함께 첫 포스트를 마칩니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A little step may be the beginning of a great journey.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Lee Jaeone</name></author><category term="잡생각" /><summary type="html">버튼을 누르다 “준비하시고… 쏘세요 !”</summary></entry></feed>
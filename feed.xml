<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>머리속에 다 있어요</title><subtitle>개발 중에 습득한 기술을 정리하는 기술 블로그 입니다.</subtitle> <updated>2021-09-17T11:09:37+09:00</updated> <author> <name>Jaeone94</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Jaeone94 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Web] SSR(서버사이드 렌더링)이 대체 뭐야?</title><link href="/posts/Web-SSR(%EC%84%9C%EB%B2%84%EC%82%AC%EC%9D%B4%EB%93%9C-%EB%A0%8C%EB%8D%94%EB%A7%81)%EC%9D%B4-%EB%8C%80%EC%B2%B4-%EB%AD%90%EC%95%BC/" rel="alternate" type="text/html" title="[Web] SSR(서버사이드 렌더링)이 대체 뭐야?" /><published>2021-09-15T00:00:00+09:00</published> <updated>2021-09-17T11:09:10+09:00</updated> <id>/posts/Web-SSR(%EC%84%9C%EB%B2%84%EC%82%AC%EC%9D%B4%EB%93%9C-%EB%A0%8C%EB%8D%94%EB%A7%81)%EC%9D%B4-%EB%8C%80%EC%B2%B4-%EB%AD%90%EC%95%BC/</id> <content src="/posts/Web-SSR(%EC%84%9C%EB%B2%84%EC%82%AC%EC%9D%B4%EB%93%9C-%EB%A0%8C%EB%8D%94%EB%A7%81)%EC%9D%B4-%EB%8C%80%EC%B2%B4-%EB%AD%90%EC%95%BC/" /> <author> <name>Jaeone94</name> </author> <category term="Frontend" /> <category term="Web" /> <summary> Server Side Rendering (SSR) : 서버 측 렌더링 이란 ? 서버사이드 렌더링(일명 SSR)은 서버가 클라이언트에게 HTML 파일을 전달할 때, 사용자가 볼 수 있는 완전한 html을 전송한다는 뜻이다. 즉, 클라이언트가 서버에게 요청신호를 보내면, 클라이언트의 웹 브라우저가 페이지를 그리기 위해 별도의 작업을 할 필요 없이 완전히 구성된 페이지(html)를 클라이언트에게 돌려주는 것이다. SSR 에 대한 정의는 아주 심플하지만, 정확하게 감이 잘 오질 않는다. 용어 정리부터 다시 해보자. 렌더링(Rendering) 이란 ? 웹 개발에서의 렌더링은 웹 사이트 코드를 사용자가 웹 사이트를 방문할 때 보게 되는 실제 대화형 페이지로 바꾸는 프로세스다. (코드 -&amp;gt; 페이지)... </summary> </entry> <entry><title>[node.js] sequelize(시퀄라이즈)를 사용해서 rdb와 통신하기</title><link href="/posts/node.js-sequelize(%EC%8B%9C%ED%80%84%EB%9D%BC%EC%9D%B4%EC%A6%88)%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-RDB%EC%99%80-%ED%86%B5%EC%8B%A0%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="[node.js] sequelize(시퀄라이즈)를 사용해서 rdb와 통신하기" /><published>2021-09-08T00:00:00+09:00</published> <updated>2021-09-11T01:14:38+09:00</updated> <id>/posts/node.js-sequelize(%EC%8B%9C%ED%80%84%EB%9D%BC%EC%9D%B4%EC%A6%88)%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-RDB%EC%99%80-%ED%86%B5%EC%8B%A0%ED%95%98%EA%B8%B0/</id> <content src="/posts/node.js-sequelize(%EC%8B%9C%ED%80%84%EB%9D%BC%EC%9D%B4%EC%A6%88)%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-RDB%EC%99%80-%ED%86%B5%EC%8B%A0%ED%95%98%EA%B8%B0/" /> <author> <name>Jaeone94</name> </author> <category term="Backend" /> <category term="Node.js" /> <summary> Api 서버를 구축하고자 할 때 DB와의 연결은 필수적이라고 할 수 있다. 오늘은 시퀄라이즈 라이브러리를 사용해서 DB와 연결하고 CRUD 기능을 수행해보자. 시퀄라이즈 ? 다양한 RDB와 호환되는 ORM(Object Relational Mapping) 라이브러리. (ex. maria, postgre, sqlite, mssql .. ) Javascript 문법으로 RDB를 조작할 수 있도록 도와준다. Step 1 실행환경 세팅 (1) 먼저 DB가 설치되어 있지 않다면 설치해준다. (실습은 mysql로 진행) windows : https://www.mysql.com/downloads/ mac : brew install mysql (2) Project root에서 np... </summary> </entry> <entry><title>210907 일기</title><link href="/posts/210907-%EC%9D%BC%EA%B8%B0/" rel="alternate" type="text/html" title="210907 일기" /><published>2021-09-07T00:00:00+09:00</published> <updated>2021-09-11T01:14:38+09:00</updated> <id>/posts/210907-%EC%9D%BC%EA%B8%B0/</id> <content src="/posts/210907-%EC%9D%BC%EA%B8%B0/" /> <author> <name>Jaeone94</name> </author> <category term="etc" /> <category term="일기" /> <summary> 아직 모르는게 산더미고 배워야할 것도 엄청 많은데. 진도가 잘 안나가는 것 같아 고민이다 ! 글을 하나 작성하는데 굉장히 긴 시간이 걸리는데, 요즘은 글을 잘 쓰기 위해 고민하는 시간이 학습하는 시간보다 많아질 것 같아 걱정이 된다. 하다보면 요령이 생기겠지 ? 그래도 블로그를 시작하기 전 까지는 모르는것을 찾을 때, 다른 블로그를 참고하거나 stack overflow를 많이 이용했는데 (복붙 :sweat_smile:) 이제는 정확한 정보를 찾기 위해 Document를 읽는 습관이 조금씩 생기는 것 같아서 기분은 좋다.. :) 프로젝트를 슬슬 시작하고 싶은데. 아이디어 구상단계에서 빈번히 막히고 있어 고민이다. 내일은 뭐라도 생각해봐야지. </summary> </entry> <entry><title>[node.js] express router와 rest api 엔드포인트 네이밍 규칙</title><link href="/posts/Node.js-Express-Router%EC%99%80-REST-API-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EA%B7%9C%EC%B9%99/" rel="alternate" type="text/html" title="[node.js] express router와 rest api 엔드포인트 네이밍 규칙" /><published>2021-09-05T00:00:00+09:00</published> <updated>2021-09-11T01:14:38+09:00</updated> <id>/posts/Node.js-Express-Router%EC%99%80-REST-API-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EA%B7%9C%EC%B9%99/</id> <content src="/posts/Node.js-Express-Router%EC%99%80-REST-API-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EA%B7%9C%EC%B9%99/" /> <author> <name>Jaeone94</name> </author> <category term="Backend" /> <category term="Node.js" /> <summary> Express의 endpoint path들을 구조적으로 관리하기 위한 Router를 알아보도록 하자. route : 길, Router : 길 찾는 놈. 아마 Router 를 배우기 전이라면 app.js 안에 수 없이 많은 api 가 존재할 것이다. end-point 의 종류도 다양할 것이고. 어느정도 규모가 큰 시스템(사실 그렇게 크지 않아도)에선 app.js의 코드행도 굉장히 길어질 것이고. 유지보수에도 난항을 겪을 것이다. 따라서 api를 어느정도 분리하여 관리할 필요가 있는데 Router가 그 역할을 해준다. 그런데 router에 들어가기에 앞서서, 구조적으로 분리한다는데 “왜 분리해야하는지?”. 즉, WHY에 대한 대답은 위에서 얘기했듯이 유지보수가 불편하다인데. 한번 어떻게... </summary> </entry> <entry><title>[node.js] express 자주 사용하는 미들웨어</title><link href="/posts/Node.js-Express-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4/" rel="alternate" type="text/html" title="[node.js] express 자주 사용하는 미들웨어" /><published>2021-09-01T00:00:00+09:00</published> <updated>2021-09-11T01:14:38+09:00</updated> <id>/posts/Node.js-Express-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4/</id> <content src="/posts/Node.js-Express-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4/" /> <author> <name>Jaeone94</name> </author> <category term="Backend" /> <category term="Node.js" /> <summary> 오늘은 똑쟁이들이 만들어둔 미들웨어들과 간략한 사용법을 알아보자 ! dotenv 환경변수를 .env 파일에 정의하고 process.env로 로드할 수 있도록 도와주는 미들웨어다. cookie secret key 나 DB관련 정보같은 보안상 소스코드 상에 노출되면 안되는 정보는 .env라는 환경변수 파일에 저장되는데 선언한 환경변수를 런타임에서 로드할 수 있도록 해준다. 설치 user@myMacbook projectRoot % npm install dotenv .env 파일 작성 (프로젝트 루트에 생성) DB_USER=myDbUser DB_PASS=1q2w3e4r DB_HOST=000.000.000.000 사용 const express = require('express'); const dote... </summary> </entry> </feed>
